//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.12.12 at 08:37:35 PM CST 
//


package generated;

import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.namespace.QName;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.annotation.XmlElementDecl;
import jakarta.xml.bind.annotation.XmlRegistry;
import jakarta.xml.bind.annotation.adapters.CollapsedStringAdapter;
import jakarta.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the generated package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _X_QNAME = new QName("", "x");
    private final static QName _Y_QNAME = new QName("", "y");
    private final static QName _Z_QNAME = new QName("", "z");
    private final static QName _BrakeGroup_QNAME = new QName("", "brake_group");
    private final static QName _Retractable_QNAME = new QName("", "retractable");
    private final static QName _Property_QNAME = new QName("", "property");
    private final static QName _Description_QNAME = new QName("", "description");
    private final static QName _Value_QNAME = new QName("", "value");
    private final static QName _BuoyantForces_QNAME = new QName("", "buoyant_forces");
    private final static QName _Feed_QNAME = new QName("", "feed");
    private final static QName _Roll_QNAME = new QName("", "roll");
    private final static QName _Pitch_QNAME = new QName("", "pitch");
    private final static QName _Yaw_QNAME = new QName("", "yaw");
    private final static QName _Sense_QNAME = new QName("", "sense");
    private final static QName _PFactor_QNAME = new QName("", "p_factor");
    private final static QName _Width_QNAME = new QName("", "width");
    private final static QName _FileheaderAuthor_QNAME = new QName("", "author");
    private final static QName _FileheaderEmail_QNAME = new QName("", "email");
    private final static QName _FileheaderOrganization_QNAME = new QName("", "organization");
    private final static QName _FileheaderNote_QNAME = new QName("", "note");
    private final static QName _FileheaderLimitation_QNAME = new QName("", "limitation");
    private final static QName _Interpolate1DRandom_QNAME = new QName("", "random");
    private final static QName _Interpolate1DUrandom_QNAME = new QName("", "urandom");
    private final static QName _Interpolate1DPi_QNAME = new QName("", "pi");
    private final static QName _Interpolate1DSwitch_QNAME = new QName("", "switch");
    private final static QName _OutputSimulation_QNAME = new QName("", "simulation");
    private final static QName _OutputAtmosphere_QNAME = new QName("", "atmosphere");
    private final static QName _OutputMassprops_QNAME = new QName("", "massprops");
    private final static QName _OutputRates_QNAME = new QName("", "rates");
    private final static QName _OutputVelocities_QNAME = new QName("", "velocities");
    private final static QName _OutputForces_QNAME = new QName("", "forces");
    private final static QName _OutputMoments_QNAME = new QName("", "moments");
    private final static QName _OutputPosition_QNAME = new QName("", "position");
    private final static QName _OutputPropulsion_QNAME = new QName("", "propulsion");
    private final static QName _OutputAerosurfaces_QNAME = new QName("", "aerosurfaces");
    private final static QName _OutputFcs_QNAME = new QName("", "fcs");
    private final static QName _OutputGroundReactions_QNAME = new QName("", "ground_reactions");
    private final static QName _OutputCoefficients_QNAME = new QName("", "coefficients");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: generated
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link Fileheader }
     * 
     */
    public Fileheader createFileheader() {
        return new Fileheader();
    }

    /**
     * Create an instance of {@link Contact }
     * 
     */
    public Contact createContact() {
        return new Contact();
    }

    /**
     * Create an instance of {@link Ifthen }
     * 
     */
    public Ifthen createIfthen() {
        return new Ifthen();
    }

    /**
     * Create an instance of {@link Propulsion }
     * 
     */
    public Propulsion createPropulsion() {
        return new Propulsion();
    }

    /**
     * Create an instance of {@link Output }
     * 
     */
    public Output createOutput() {
        return new Output();
    }

    /**
     * Create an instance of {@link Contact.RelaxationVelocity }
     * 
     */
    public Contact.RelaxationVelocity createContactRelaxationVelocity() {
        return new Contact.RelaxationVelocity();
    }

    /**
     * Create an instance of {@link FdmConfig }
     * 
     */
    public FdmConfig createFdmConfig() {
        return new FdmConfig();
    }

    /**
     * Create an instance of {@link Fileheader.License }
     * 
     */
    public Fileheader.License createFileheaderLicense() {
        return new Fileheader.License();
    }

    /**
     * Create an instance of {@link Reference }
     * 
     */
    public Reference createReference() {
        return new Reference();
    }

    /**
     * Create an instance of {@link Metrics }
     * 
     */
    public Metrics createMetrics() {
        return new Metrics();
    }

    /**
     * Create an instance of {@link Wingarea }
     * 
     */
    public Wingarea createWingarea() {
        return new Wingarea();
    }

    /**
     * Create an instance of {@link Wingspan }
     * 
     */
    public Wingspan createWingspan() {
        return new Wingspan();
    }

    /**
     * Create an instance of {@link WingIncidence }
     * 
     */
    public WingIncidence createWingIncidence() {
        return new WingIncidence();
    }

    /**
     * Create an instance of {@link Chord }
     * 
     */
    public Chord createChord() {
        return new Chord();
    }

    /**
     * Create an instance of {@link Htailarea }
     * 
     */
    public Htailarea createHtailarea() {
        return new Htailarea();
    }

    /**
     * Create an instance of {@link Htailarm }
     * 
     */
    public Htailarm createHtailarm() {
        return new Htailarm();
    }

    /**
     * Create an instance of {@link Vtailarea }
     * 
     */
    public Vtailarea createVtailarea() {
        return new Vtailarea();
    }

    /**
     * Create an instance of {@link Vtailarm }
     * 
     */
    public Vtailarm createVtailarm() {
        return new Vtailarm();
    }

    /**
     * Create an instance of {@link Location }
     * 
     */
    public Location createLocation() {
        return new Location();
    }

    /**
     * Create an instance of {@link MassBalance }
     * 
     */
    public MassBalance createMassBalance() {
        return new MassBalance();
    }

    /**
     * Create an instance of {@link Ixx }
     * 
     */
    public Ixx createIxx() {
        return new Ixx();
    }

    /**
     * Create an instance of {@link Iyy }
     * 
     */
    public Iyy createIyy() {
        return new Iyy();
    }

    /**
     * Create an instance of {@link Izz }
     * 
     */
    public Izz createIzz() {
        return new Izz();
    }

    /**
     * Create an instance of {@link Ixy }
     * 
     */
    public Ixy createIxy() {
        return new Ixy();
    }

    /**
     * Create an instance of {@link Ixz }
     * 
     */
    public Ixz createIxz() {
        return new Ixz();
    }

    /**
     * Create an instance of {@link Iyz }
     * 
     */
    public Iyz createIyz() {
        return new Iyz();
    }

    /**
     * Create an instance of {@link Emptywt }
     * 
     */
    public Emptywt createEmptywt() {
        return new Emptywt();
    }

    /**
     * Create an instance of {@link Pointmass }
     * 
     */
    public Pointmass createPointmass() {
        return new Pointmass();
    }

    /**
     * Create an instance of {@link Weight }
     * 
     */
    public Weight createWeight() {
        return new Weight();
    }

    /**
     * Create an instance of {@link GroundReactions }
     * 
     */
    public GroundReactions createGroundReactions() {
        return new GroundReactions();
    }

    /**
     * Create an instance of {@link Contact.SpringCoeff }
     * 
     */
    public Contact.SpringCoeff createContactSpringCoeff() {
        return new Contact.SpringCoeff();
    }

    /**
     * Create an instance of {@link Contact.DampingCoeff }
     * 
     */
    public Contact.DampingCoeff createContactDampingCoeff() {
        return new Contact.DampingCoeff();
    }

    /**
     * Create an instance of {@link Contact.DampingCoeffRebound }
     * 
     */
    public Contact.DampingCoeffRebound createContactDampingCoeffRebound() {
        return new Contact.DampingCoeffRebound();
    }

    /**
     * Create an instance of {@link Contact.MaxSteer }
     * 
     */
    public Contact.MaxSteer createContactMaxSteer() {
        return new Contact.MaxSteer();
    }

    /**
     * Create an instance of {@link ForceLagFilter }
     * 
     */
    public ForceLagFilter createForceLagFilter() {
        return new ForceLagFilter();
    }

    /**
     * Create an instance of {@link ExternalReactions }
     * 
     */
    public ExternalReactions createExternalReactions() {
        return new ExternalReactions();
    }

    /**
     * Create an instance of {@link Force }
     * 
     */
    public Force createForce() {
        return new Force();
    }

    /**
     * Create an instance of {@link Function }
     * 
     */
    public Function createFunction() {
        return new Function();
    }

    /**
     * Create an instance of {@link Table }
     * 
     */
    public Table createTable() {
        return new Table();
    }

    /**
     * Create an instance of {@link IndependentVar }
     * 
     */
    public IndependentVar createIndependentVar() {
        return new IndependentVar();
    }

    /**
     * Create an instance of {@link TableData }
     * 
     */
    public TableData createTableData() {
        return new TableData();
    }

    /**
     * Create an instance of {@link Product }
     * 
     */
    public Product createProduct() {
        return new Product();
    }

    /**
     * Create an instance of {@link Difference }
     * 
     */
    public Difference createDifference() {
        return new Difference();
    }

    /**
     * Create an instance of {@link Sum }
     * 
     */
    public Sum createSum() {
        return new Sum();
    }

    /**
     * Create an instance of {@link Quotient }
     * 
     */
    public Quotient createQuotient() {
        return new Quotient();
    }

    /**
     * Create an instance of {@link Pow }
     * 
     */
    public Pow createPow() {
        return new Pow();
    }

    /**
     * Create an instance of {@link Abs }
     * 
     */
    public Abs createAbs() {
        return new Abs();
    }

    /**
     * Create an instance of {@link Sin }
     * 
     */
    public Sin createSin() {
        return new Sin();
    }

    /**
     * Create an instance of {@link Cos }
     * 
     */
    public Cos createCos() {
        return new Cos();
    }

    /**
     * Create an instance of {@link Tan }
     * 
     */
    public Tan createTan() {
        return new Tan();
    }

    /**
     * Create an instance of {@link Asin }
     * 
     */
    public Asin createAsin() {
        return new Asin();
    }

    /**
     * Create an instance of {@link Acos }
     * 
     */
    public Acos createAcos() {
        return new Acos();
    }

    /**
     * Create an instance of {@link Atan }
     * 
     */
    public Atan createAtan() {
        return new Atan();
    }

    /**
     * Create an instance of {@link Atan2 }
     * 
     */
    public Atan2 createAtan2() {
        return new Atan2();
    }

    /**
     * Create an instance of {@link Min }
     * 
     */
    public Min createMin() {
        return new Min();
    }

    /**
     * Create an instance of {@link Max }
     * 
     */
    public Max createMax() {
        return new Max();
    }

    /**
     * Create an instance of {@link Avg }
     * 
     */
    public Avg createAvg() {
        return new Avg();
    }

    /**
     * Create an instance of {@link Fraction }
     * 
     */
    public Fraction createFraction() {
        return new Fraction();
    }

    /**
     * Create an instance of {@link Integer }
     * 
     */
    public Integer createInteger() {
        return new Integer();
    }

    /**
     * Create an instance of {@link Mod }
     * 
     */
    public Mod createMod() {
        return new Mod();
    }

    /**
     * Create an instance of {@link Lt }
     * 
     */
    public Lt createLt() {
        return new Lt();
    }

    /**
     * Create an instance of {@link Le }
     * 
     */
    public Le createLe() {
        return new Le();
    }

    /**
     * Create an instance of {@link Gt }
     * 
     */
    public Gt createGt() {
        return new Gt();
    }

    /**
     * Create an instance of {@link Ge }
     * 
     */
    public Ge createGe() {
        return new Ge();
    }

    /**
     * Create an instance of {@link Eq }
     * 
     */
    public Eq createEq() {
        return new Eq();
    }

    /**
     * Create an instance of {@link Nq }
     * 
     */
    public Nq createNq() {
        return new Nq();
    }

    /**
     * Create an instance of {@link And }
     * 
     */
    public And createAnd() {
        return new And();
    }

    /**
     * Create an instance of {@link Or }
     * 
     */
    public Or createOr() {
        return new Or();
    }

    /**
     * Create an instance of {@link Not }
     * 
     */
    public Not createNot() {
        return new Not();
    }

    /**
     * Create an instance of {@link Ifthen.Switch }
     * 
     */
    public Ifthen.Switch createIfthenSwitch() {
        return new Ifthen.Switch();
    }

    /**
     * Create an instance of {@link Interpolate1D }
     * 
     */
    public Interpolate1D createInterpolate1D() {
        return new Interpolate1D();
    }

    /**
     * Create an instance of {@link Direction }
     * 
     */
    public Direction createDirection() {
        return new Direction();
    }

    /**
     * Create an instance of {@link Propulsion.Property }
     * 
     */
    public Propulsion.Property createPropulsionProperty() {
        return new Propulsion.Property();
    }

    /**
     * Create an instance of {@link Engine }
     * 
     */
    public Engine createEngine() {
        return new Engine();
    }

    /**
     * Create an instance of {@link Thruster }
     * 
     */
    public Thruster createThruster() {
        return new Thruster();
    }

    /**
     * Create an instance of {@link Orient }
     * 
     */
    public Orient createOrient() {
        return new Orient();
    }

    /**
     * Create an instance of {@link Pointing }
     * 
     */
    public Pointing createPointing() {
        return new Pointing();
    }

    /**
     * Create an instance of {@link Tank }
     * 
     */
    public Tank createTank() {
        return new Tank();
    }

    /**
     * Create an instance of {@link Radius }
     * 
     */
    public Radius createRadius() {
        return new Radius();
    }

    /**
     * Create an instance of {@link Capacity }
     * 
     */
    public Capacity createCapacity() {
        return new Capacity();
    }

    /**
     * Create an instance of {@link Standpipe }
     * 
     */
    public Standpipe createStandpipe() {
        return new Standpipe();
    }

    /**
     * Create an instance of {@link Contents }
     * 
     */
    public Contents createContents() {
        return new Contents();
    }

    /**
     * Create an instance of {@link DrainLocation }
     * 
     */
    public DrainLocation createDrainLocation() {
        return new DrainLocation();
    }

    /**
     * Create an instance of {@link System }
     * 
     */
    public System createSystem() {
        return new System();
    }

    /**
     * Create an instance of {@link Sensor }
     * 
     */
    public Sensor createSensor() {
        return new Sensor();
    }

    /**
     * Create an instance of {@link Noise }
     * 
     */
    public Noise createNoise() {
        return new Noise();
    }

    /**
     * Create an instance of {@link Quantization }
     * 
     */
    public Quantization createQuantization() {
        return new Quantization();
    }

    /**
     * Create an instance of {@link Clipto }
     * 
     */
    public Clipto createClipto() {
        return new Clipto();
    }

    /**
     * Create an instance of {@link Channel }
     * 
     */
    public Channel createChannel() {
        return new Channel();
    }

    /**
     * Create an instance of {@link Actuator }
     * 
     */
    public Actuator createActuator() {
        return new Actuator();
    }

    /**
     * Create an instance of {@link AerosurfaceScale }
     * 
     */
    public AerosurfaceScale createAerosurfaceScale() {
        return new AerosurfaceScale();
    }

    /**
     * Create an instance of {@link Domain }
     * 
     */
    public Domain createDomain() {
        return new Domain();
    }

    /**
     * Create an instance of {@link Range }
     * 
     */
    public Range createRange() {
        return new Range();
    }

    /**
     * Create an instance of {@link Integrator }
     * 
     */
    public Integrator createIntegrator() {
        return new Integrator();
    }

    /**
     * Create an instance of {@link Kinematic }
     * 
     */
    public Kinematic createKinematic() {
        return new Kinematic();
    }

    /**
     * Create an instance of {@link Traverse }
     * 
     */
    public Traverse createTraverse() {
        return new Traverse();
    }

    /**
     * Create an instance of {@link Setting }
     * 
     */
    public Setting createSetting() {
        return new Setting();
    }

    /**
     * Create an instance of {@link LagFilter }
     * 
     */
    public LagFilter createLagFilter() {
        return new LagFilter();
    }

    /**
     * Create an instance of {@link LeadLagFilter }
     * 
     */
    public LeadLagFilter createLeadLagFilter() {
        return new LeadLagFilter();
    }

    /**
     * Create an instance of {@link Pid }
     * 
     */
    public Pid createPid() {
        return new Pid();
    }

    /**
     * Create an instance of {@link PureGain }
     * 
     */
    public PureGain createPureGain() {
        return new PureGain();
    }

    /**
     * Create an instance of {@link ScheduledGain }
     * 
     */
    public ScheduledGain createScheduledGain() {
        return new ScheduledGain();
    }

    /**
     * Create an instance of {@link SecondOrderFilter }
     * 
     */
    public SecondOrderFilter createSecondOrderFilter() {
        return new SecondOrderFilter();
    }

    /**
     * Create an instance of {@link Summer }
     * 
     */
    public Summer createSummer() {
        return new Summer();
    }

    /**
     * Create an instance of {@link generated.Switch }
     * 
     */
    public generated.Switch createSwitch() {
        return new generated.Switch();
    }

    /**
     * Create an instance of {@link Default }
     * 
     */
    public Default createDefault() {
        return new Default();
    }

    /**
     * Create an instance of {@link Test }
     * 
     */
    public Test createTest() {
        return new Test();
    }

    /**
     * Create an instance of {@link WashoutFilter }
     * 
     */
    public WashoutFilter createWashoutFilter() {
        return new WashoutFilter();
    }

    /**
     * Create an instance of {@link Deadband }
     * 
     */
    public Deadband createDeadband() {
        return new Deadband();
    }

    /**
     * Create an instance of {@link FcsFunction }
     * 
     */
    public FcsFunction createFcsFunction() {
        return new FcsFunction();
    }

    /**
     * Create an instance of {@link Autopilot }
     * 
     */
    public Autopilot createAutopilot() {
        return new Autopilot();
    }

    /**
     * Create an instance of {@link FlightControl }
     * 
     */
    public FlightControl createFlightControl() {
        return new FlightControl();
    }

    /**
     * Create an instance of {@link Aerodynamics }
     * 
     */
    public Aerodynamics createAerodynamics() {
        return new Aerodynamics();
    }

    /**
     * Create an instance of {@link Alphalimits }
     * 
     */
    public Alphalimits createAlphalimits() {
        return new Alphalimits();
    }

    /**
     * Create an instance of {@link HysteresisLimits }
     * 
     */
    public HysteresisLimits createHysteresisLimits() {
        return new HysteresisLimits();
    }

    /**
     * Create an instance of {@link Axis }
     * 
     */
    public Axis createAxis() {
        return new Axis();
    }

    /**
     * Create an instance of {@link Input }
     * 
     */
    public Input createInput() {
        return new Input();
    }

    /**
     * Create an instance of {@link Output.Property }
     * 
     */
    public Output.Property createOutputProperty() {
        return new Output.Property();
    }

    /**
     * Create an instance of {@link Contact.RelaxationVelocity.Rolling }
     * 
     */
    public Contact.RelaxationVelocity.Rolling createContactRelaxationVelocityRolling() {
        return new Contact.RelaxationVelocity.Rolling();
    }

    /**
     * Create an instance of {@link Contact.RelaxationVelocity.Side }
     * 
     */
    public Contact.RelaxationVelocity.Side createContactRelaxationVelocitySide() {
        return new Contact.RelaxationVelocity.Side();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "x")
    public JAXBElement<Double> createX(Double value) {
        return new JAXBElement<Double>(_X_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "y")
    public JAXBElement<Double> createY(Double value) {
        return new JAXBElement<Double>(_Y_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "z")
    public JAXBElement<Double> createZ(Double value) {
        return new JAXBElement<Double>(_Z_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "brake_group")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    public JAXBElement<String> createBrakeGroup(String value) {
        return new JAXBElement<String>(_BrakeGroup_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "retractable")
    public JAXBElement<BigInteger> createRetractable(BigInteger value) {
        return new JAXBElement<BigInteger>(_Retractable_QNAME, BigInteger.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "property")
    public JAXBElement<String> createProperty(String value) {
        return new JAXBElement<String>(_Property_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "description")
    public JAXBElement<String> createDescription(String value) {
        return new JAXBElement<String>(_Description_QNAME, String.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "value")
    public JAXBElement<Double> createValue(Double value) {
        return new JAXBElement<Double>(_Value_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "buoyant_forces")
    public JAXBElement<Object> createBuoyantForces(Object value) {
        return new JAXBElement<Object>(_BuoyantForces_QNAME, Object.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "feed")
    public JAXBElement<BigInteger> createFeed(BigInteger value) {
        return new JAXBElement<BigInteger>(_Feed_QNAME, BigInteger.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "roll")
    public JAXBElement<Double> createRoll(Double value) {
        return new JAXBElement<Double>(_Roll_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pitch")
    public JAXBElement<Double> createPitch(Double value) {
        return new JAXBElement<Double>(_Pitch_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "yaw")
    public JAXBElement<Double> createYaw(Double value) {
        return new JAXBElement<Double>(_Yaw_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "sense")
    public JAXBElement<BigInteger> createSense(BigInteger value) {
        return new JAXBElement<BigInteger>(_Sense_QNAME, BigInteger.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigDecimal }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link BigDecimal }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "p_factor")
    public JAXBElement<BigDecimal> createPFactor(BigDecimal value) {
        return new JAXBElement<BigDecimal>(_PFactor_QNAME, BigDecimal.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Double }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "width")
    public JAXBElement<Double> createWidth(Double value) {
        return new JAXBElement<Double>(_Width_QNAME, Double.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "author", scope = Fileheader.class)
    public JAXBElement<String> createFileheaderAuthor(String value) {
        return new JAXBElement<String>(_FileheaderAuthor_QNAME, String.class, Fileheader.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "email", scope = Fileheader.class)
    public JAXBElement<String> createFileheaderEmail(String value) {
        return new JAXBElement<String>(_FileheaderEmail_QNAME, String.class, Fileheader.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "organization", scope = Fileheader.class)
    public JAXBElement<String> createFileheaderOrganization(String value) {
        return new JAXBElement<String>(_FileheaderOrganization_QNAME, String.class, Fileheader.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "note", scope = Fileheader.class)
    public JAXBElement<String> createFileheaderNote(String value) {
        return new JAXBElement<String>(_FileheaderNote_QNAME, String.class, Fileheader.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "limitation", scope = Fileheader.class)
    public JAXBElement<String> createFileheaderLimitation(String value) {
        return new JAXBElement<String>(_FileheaderLimitation_QNAME, String.class, Fileheader.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Interpolate1D.class)
    public JAXBElement<Object> createInterpolate1DRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Interpolate1D.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Interpolate1D.class)
    public JAXBElement<Object> createInterpolate1DUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Interpolate1D.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Interpolate1D.class)
    public JAXBElement<Object> createInterpolate1DPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Interpolate1D.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Interpolate1D.class)
    public JAXBElement<Ifthen.Switch> createInterpolate1DSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Interpolate1D.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Ifthen.class)
    public JAXBElement<Object> createIfthenRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Ifthen.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Ifthen.class)
    public JAXBElement<Object> createIfthenUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Ifthen.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Ifthen.class)
    public JAXBElement<Object> createIfthenPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Ifthen.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Ifthen.class)
    public JAXBElement<Ifthen.Switch> createIfthenSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Ifthen.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Or.class)
    public JAXBElement<Object> createOrRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Or.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Or.class)
    public JAXBElement<Object> createOrUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Or.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Or.class)
    public JAXBElement<Object> createOrPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Or.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Or.class)
    public JAXBElement<Ifthen.Switch> createOrSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Or.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = And.class)
    public JAXBElement<Object> createAndRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, And.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = And.class)
    public JAXBElement<Object> createAndUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, And.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = And.class)
    public JAXBElement<Object> createAndPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, And.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = And.class)
    public JAXBElement<Ifthen.Switch> createAndSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, And.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Nq.class)
    public JAXBElement<Object> createNqRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Nq.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Nq.class)
    public JAXBElement<Object> createNqUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Nq.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Nq.class)
    public JAXBElement<Object> createNqPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Nq.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Nq.class)
    public JAXBElement<Ifthen.Switch> createNqSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Nq.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Eq.class)
    public JAXBElement<Object> createEqRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Eq.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Eq.class)
    public JAXBElement<Object> createEqUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Eq.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Eq.class)
    public JAXBElement<Object> createEqPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Eq.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Eq.class)
    public JAXBElement<Ifthen.Switch> createEqSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Eq.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Ge.class)
    public JAXBElement<Object> createGeRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Ge.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Ge.class)
    public JAXBElement<Object> createGeUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Ge.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Ge.class)
    public JAXBElement<Object> createGePi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Ge.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Ge.class)
    public JAXBElement<Ifthen.Switch> createGeSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Ge.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Gt.class)
    public JAXBElement<Object> createGtRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Gt.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Gt.class)
    public JAXBElement<Object> createGtUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Gt.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Gt.class)
    public JAXBElement<Object> createGtPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Gt.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Gt.class)
    public JAXBElement<Ifthen.Switch> createGtSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Gt.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Le.class)
    public JAXBElement<Object> createLeRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Le.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Le.class)
    public JAXBElement<Object> createLeUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Le.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Le.class)
    public JAXBElement<Object> createLePi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Le.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Le.class)
    public JAXBElement<Ifthen.Switch> createLeSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Le.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Lt.class)
    public JAXBElement<Object> createLtRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Lt.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Lt.class)
    public JAXBElement<Object> createLtUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Lt.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Lt.class)
    public JAXBElement<Object> createLtPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Lt.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Lt.class)
    public JAXBElement<Ifthen.Switch> createLtSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Lt.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Mod.class)
    public JAXBElement<Object> createModRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Mod.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Mod.class)
    public JAXBElement<Object> createModUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Mod.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Mod.class)
    public JAXBElement<Object> createModPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Mod.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Mod.class)
    public JAXBElement<Ifthen.Switch> createModSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Mod.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Avg.class)
    public JAXBElement<Object> createAvgRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Avg.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Avg.class)
    public JAXBElement<Object> createAvgUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Avg.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Avg.class)
    public JAXBElement<Object> createAvgPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Avg.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Avg.class)
    public JAXBElement<Ifthen.Switch> createAvgSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Avg.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Max.class)
    public JAXBElement<Object> createMaxRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Max.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Max.class)
    public JAXBElement<Object> createMaxUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Max.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Max.class)
    public JAXBElement<Object> createMaxPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Max.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Max.class)
    public JAXBElement<Ifthen.Switch> createMaxSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Max.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Min.class)
    public JAXBElement<Object> createMinRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Min.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Min.class)
    public JAXBElement<Object> createMinUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Min.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Min.class)
    public JAXBElement<Object> createMinPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Min.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Min.class)
    public JAXBElement<Ifthen.Switch> createMinSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Min.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Atan2 .class)
    public JAXBElement<Object> createAtan2Random(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Atan2 .class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Atan2 .class)
    public JAXBElement<Object> createAtan2Urandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Atan2 .class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Atan2 .class)
    public JAXBElement<Object> createAtan2Pi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Atan2 .class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Atan2 .class)
    public JAXBElement<Ifthen.Switch> createAtan2Switch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Atan2 .class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Pow.class)
    public JAXBElement<Object> createPowRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Pow.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Pow.class)
    public JAXBElement<Object> createPowUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Pow.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Pow.class)
    public JAXBElement<Object> createPowPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Pow.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Pow.class)
    public JAXBElement<Ifthen.Switch> createPowSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Pow.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Quotient.class)
    public JAXBElement<Object> createQuotientRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Quotient.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Quotient.class)
    public JAXBElement<Object> createQuotientUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Quotient.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Quotient.class)
    public JAXBElement<Object> createQuotientPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Quotient.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Quotient.class)
    public JAXBElement<Ifthen.Switch> createQuotientSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Quotient.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Sum.class)
    public JAXBElement<Object> createSumRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Sum.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Sum.class)
    public JAXBElement<Object> createSumUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Sum.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Sum.class)
    public JAXBElement<Object> createSumPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Sum.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Sum.class)
    public JAXBElement<Ifthen.Switch> createSumSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Sum.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Difference.class)
    public JAXBElement<Object> createDifferenceRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Difference.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Difference.class)
    public JAXBElement<Object> createDifferenceUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Difference.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Difference.class)
    public JAXBElement<Object> createDifferencePi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Difference.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Difference.class)
    public JAXBElement<Ifthen.Switch> createDifferenceSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Difference.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Product.class)
    public JAXBElement<Object> createProductRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Product.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Product.class)
    public JAXBElement<Object> createProductUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Product.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Product.class)
    public JAXBElement<Object> createProductPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Product.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Product.class)
    public JAXBElement<Ifthen.Switch> createProductSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Product.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Output.Property }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Output.Property }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "property", scope = Output.class)
    public JAXBElement<Output.Property> createOutputProperty(Output.Property value) {
        return new JAXBElement<Output.Property>(_Property_QNAME, Output.Property.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "simulation", scope = Output.class)
    public JAXBElement<String> createOutputSimulation(String value) {
        return new JAXBElement<String>(_OutputSimulation_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "atmosphere", scope = Output.class)
    public JAXBElement<String> createOutputAtmosphere(String value) {
        return new JAXBElement<String>(_OutputAtmosphere_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "massprops", scope = Output.class)
    public JAXBElement<String> createOutputMassprops(String value) {
        return new JAXBElement<String>(_OutputMassprops_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "rates", scope = Output.class)
    public JAXBElement<String> createOutputRates(String value) {
        return new JAXBElement<String>(_OutputRates_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "velocities", scope = Output.class)
    public JAXBElement<String> createOutputVelocities(String value) {
        return new JAXBElement<String>(_OutputVelocities_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "forces", scope = Output.class)
    public JAXBElement<String> createOutputForces(String value) {
        return new JAXBElement<String>(_OutputForces_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "moments", scope = Output.class)
    public JAXBElement<String> createOutputMoments(String value) {
        return new JAXBElement<String>(_OutputMoments_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "position", scope = Output.class)
    public JAXBElement<String> createOutputPosition(String value) {
        return new JAXBElement<String>(_OutputPosition_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "propulsion", scope = Output.class)
    public JAXBElement<String> createOutputPropulsion(String value) {
        return new JAXBElement<String>(_OutputPropulsion_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "aerosurfaces", scope = Output.class)
    public JAXBElement<String> createOutputAerosurfaces(String value) {
        return new JAXBElement<String>(_OutputAerosurfaces_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "fcs", scope = Output.class)
    public JAXBElement<String> createOutputFcs(String value) {
        return new JAXBElement<String>(_OutputFcs_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "ground_reactions", scope = Output.class)
    public JAXBElement<String> createOutputGroundReactions(String value) {
        return new JAXBElement<String>(_OutputGroundReactions_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link String }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "coefficients", scope = Output.class)
    public JAXBElement<String> createOutputCoefficients(String value) {
        return new JAXBElement<String>(_OutputCoefficients_QNAME, String.class, Output.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "random", scope = Ifthen.Switch.class)
    public JAXBElement<Object> createIfthenSwitchRandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DRandom_QNAME, Object.class, Ifthen.Switch.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "urandom", scope = Ifthen.Switch.class)
    public JAXBElement<Object> createIfthenSwitchUrandom(Object value) {
        return new JAXBElement<Object>(_Interpolate1DUrandom_QNAME, Object.class, Ifthen.Switch.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Object }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "pi", scope = Ifthen.Switch.class)
    public JAXBElement<Object> createIfthenSwitchPi(Object value) {
        return new JAXBElement<Object>(_Interpolate1DPi_QNAME, Object.class, Ifthen.Switch.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     * 
     * @param value
     *     Java instance representing xml element's value.
     * @return
     *     the new instance of {@link JAXBElement }{@code <}{@link Ifthen.Switch }{@code >}
     */
    @XmlElementDecl(namespace = "", name = "switch", scope = Ifthen.Switch.class)
    public JAXBElement<Ifthen.Switch> createIfthenSwitchSwitch(Ifthen.Switch value) {
        return new JAXBElement<Ifthen.Switch>(_Interpolate1DSwitch_QNAME, Ifthen.Switch.class, Ifthen.Switch.class, value);
    }

}
